import urllib
import re
####################################################################################################

def MetadataObjectForURL(url):
	Log ("RTBF MetadataObjectForURL " + url )
	try:
		html = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable
	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
  	return VideoClipObject ( title = title, summary = summary, thumb = thumb )

####################################################################################################

def MediaObjectsForURL(url):
  Log ("RTBF MediaObjectsForURL " + url )
  return [MediaObject(container = Container.MP4, video_codec = VideoCodec.H264, audio_codec = AudioCodec.AAC,video_resolution = "sd",
      optimized_for_streaming = True,
      audio_channels = 2,                                                  
      parts = [PartObject(key=Callback(PlayVideo, url = url))]
    )
  ]                                                                      

def PlayVideo(url):
  Log ("RTBF PlayVideo " + url )
  # Request the URL
  html = HTML.ElementFromURL(url)
  config = html.xpath('.//div[contains(@class, "js-embed-player")]')[0].get("data-media")
  config_json = str(config)
  # Log ("RTBF config_json " + config_json )
  Log.Exception(config_json)
  video_url = config_json.split("high")[1].split(",")[0]
  video_url = video_url.replace ("\\","")
  video_url = video_url.replace ("\"","")
  video_url = video_url.replace (" ","")
  video_url = video_url.replace (":http","http")
  Log ("RTBF URL " + video_url)
  Log.Exception(video_url)
  return Redirect(video_url)
  
